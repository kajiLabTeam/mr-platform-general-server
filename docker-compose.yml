services:
  postgres:
    container_name: ${POSTGRES_CONTAINER_HOST}
    image: postgres:15
    restart: always
    ports:
      - 5433:5432
    volumes:
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - mr-platform

  relay-server-golang:
    container_name: ${GO_CONTAINER_HOST_RELAY}
    hostname: ${GO_HOST}
    tty: true
    env_file: .env
    build:
      context: .
      dockerfile: ./mr-platform-relay-server/docker/go/Dockerfile
    volumes:
      - ./mr-platform-relay-server/src:/go/src/app
      - ./mr-platform-relay-server/docker/go/log:/go/src/log
    depends_on:
      postgres:
        condition: service_started
    ports:
      - 8084:8000
    networks:
      - mr-platform

  digital-twin-golang:
    container_name: ${GO_CONTAINER_HOST_DIGITAL_TWIN}
    hostname: ${GO_HOST}
    tty: true
    env_file: .env
    build:
      context: .
      dockerfile: ./mr-platform-digital-twin-server/docker/go/Dockerfile
    volumes:
      - ./mr-platform-digital-twin-server/src:/go/src/app
      - ./mr-platform-digital-twin-server/docker/go/log:/go/src/log
    depends_on:
      postgres:
        condition: service_started
    ports:
      - 8087:8000
    networks:
      - mr-platform

  recommend-contents-golang:
    container_name: ${GO_CONTAINER_HOST_RECONTEND}
    hostname: ${GO_HOST}
    tty: true
    env_file: .env
    build:
      context: .
      dockerfile: ./mr-platform-recommend-contents-server/docker/go/Dockerfile
    volumes:
      - ./mr-platform-recommend-contents-server/src:/go/src/app
      - ./mr-platform-recommend-contents-server/docker/go/log:/go/src/log
    depends_on:
      postgres:
        condition: service_started
      cell_relation_neo4j:
        condition: service_healthy
    ports:
      - 8086:8000
    networks:
      - mr-platform

  contents-golang:
    container_name: ${GO_CONTAINER_HOST_CONTENTS}
    hostname: ${GO_HOST}
    tty: true
    env_file: .env
    build:
      context: .
      dockerfile: ./mr-platform-contents-server/docker/go/Dockerfile
    volumes:
      - ./mr-platform-contents-server/src:/go/src/app
      - ./mr-platform-contents-server/docker/go/log:/go/src/log
    depends_on:
      postgres:
        condition: service_started
      cell_relation_neo4j:
        condition: service_healthy
    ports:
      - 8089:8000
    networks:
      - mr-platform

  user-manegement-golang:
    container_name: ${GO_CONTAINER_HOST_USER}
    hostname: ${GO_HOST}
    tty: true
    env_file: .env
    build:
      context: .
      dockerfile: ./mr-platform-user-management-server/docker/go/Dockerfile
    volumes:
      - ./mr-platform-user-management-server/src:/go/src/app
      - ./mr-platform-user-management-server/docker/go/log:/go/src/log
    depends_on:
      postgres:
        condition: service_started
    ports:
      - 8088:8000
    networks:
      - mr-platform

  organization-management-golang:
    container_name: ${GO_CONTAINER_HOST_ORGANIZATION}
    hostname: ${GO_HOST}
    tty: true
    env_file: .env
    build:
      context: .
      dockerfile: ./mr-platform-organization-management-server/docker/go/Dockerfile
    volumes:
      - ./mr-platform-organization-management-server/src:/go/src/app
      - ./mr-platform-organization-management-server/docker/go/log:/go/src/log
    depends_on:
      postgres:
        condition: service_started
    ports:
      - 8090:8000
    networks:
      - mr-platform

  city-building-management-golang:
    container_name: ${GO_CONTAINER_HOST_CITY_BUILDING}
    hostname: ${GO_HOST}
    tty: true
    env_file: .env
    build:
      context: .
      dockerfile: ./mr-platform-city-building-management-server/docker/go/Dockerfile
    volumes:
      - ./mr-platform-city-building-management-server/src:/go/src/app
      - ./mr-platform-city-building-management-server/docker/go/log:/go/src/log
    depends_on:
      postgres:
        condition: service_started
    ports:
      - 8091:8000
    networks:
      - mr-platform

  cell_relation_neo4j:
    container_name: ${CELL_RELATION_NEO4J}
    build:
      context: .
      dockerfile: ./docker/neo4j/Dockerfile
    ports:
      - 7487:7474
      - 7973:7687
    restart: on-failure
    volumes:
      - ./docker/neo4j/data:/data
      - ./docker/neo4j/logs:/logs
      - ./docker/neo4j/conf:/conf
      - ./docker/neo4j/import:/import
      - ./docker/neo4j/script:/script
    networks:
      - mr-platform
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
      - EXTENSION_SCRIPT=/script/import_data.sh
    command: neo4j
    healthcheck:
      test: 'curl -f http://localhost:7474 || exit 1'
      timeout: 10s
      retries: 5
      start_period: 20s

networks:
  mr-platform:
    driver: bridge
